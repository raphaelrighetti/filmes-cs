ASP.NET é uma tecnologia da Microsoft utilizada no desenvolvimento de aplicações web, ou seja, APIs REST, sistemas completos com server-side rendering utilizando o Razor e etc.

============RESTful============

Dizemos que uma API é RESTful quando ela está completamente de acordo com o padrão de arquitetura REST, seguindo todas as boas práticas e tudo mais.

============CONTROLLERS============

Os parâmetros que recebemos por meio do corpo da requisição em um método de um controlador já são, por padrão, esperados como JSON e convertidos para o tipo que estamos recebendo no método, assim como no Spring.

============[ApiController]============

Annotation do ASP.NET que transforma a nossa classe em questão em um controlador da API.

============[Route("[controller]")============

Annotation que define a rota que aquele controlador estará escutando.

Quando utilizamos o "[controller]" como rota, a rota será a parte do nome da nossa classe que fica atrás do sufixo "Controller".

============ControllerBase============

É a classe base dos controladores que não dão suporte a nenhum View.

Possui um monte de coisa.

============appsettings.json============

É o arquivo onde definimos algumas configurações do nosso projeto, como os hosts que têm acesso permitido à nossa API, algumas definições dos logs gerados e etc.

============launchSettings.json============

É o arquivo onde definimos algumas configurações de inicialização do nosso projeto, funcionando de forma parecida com o arquivo "application.properties" do Spring.

============[HttpGet], [HttpPost]...============

São annotations que colocamos sobre os métodos para definir qual é o método HTTP que eles irão responder.

============[FromBody]============

Annotation que funciona exatamente da mesma forma que a "@RequestBody" do SpringWeb.

Nos permite definir que um parâmetro de um método do controlador virá do corpo da requisição.

============[FromQuery]============

Utilizamos para pegar um parâmetro que é mandado na query string da URL.

Pode ter valores padrão que serão utilizados caso nenhum valor seja passado.

============PAGINAÇÃO============

Podemos fazer uma espécie de paginação utilizando os próprios métodos "Skip()" e "Take()" de IEnumerable.

Você define quantos itens devem ser pulados e quantos você quer pegar a partir do item após o último pulado.

É interessante que podemos fazer uma lógica onde o usuário passa a página e nós mesmos calculamos o valor do "Skip()".

============System.ComponentModel.DataAnnotations============

É o namespace que contém as annotations de validação de objetos, como a "[Required]", a "[MaxLength]", a "[Range]" e por aí vai.

Em todas as annotations de validação podemos passar o parâmetro "ErrorMessage =", que faz com que a mensagem de erro seja a string que passamos nesse parâmetro.

Quando utilizamos essas annotations e algum valor vem errado na requisição, essa verificação já é feita automaticamente devolvendo uma resposta HTTP padronizada.

Podemos utilizar estas anotações em parâmetros recebidos nos métodos e etc.

============IEnumerable============

É sempre interessante retornarmos um IEnumerable no lugar de uma List ou alguma outra coleção em método que respondem à requisições GET, pois assim utilizamos o polimorfismo, garantindo que, mesmo que mudemos a implementação utilizada, o método ainda retornará da forma que esperamos.

============[HttpGet({<nome>})]============

Podemos utilizar essa sintaxe para especificar que iremos receber o valor colocado no caminho da URL da requisição para este endpoint.

Isso é muito utilizado para achar recursos a partir de um id ou algo do tipo, funcionando de forma muito similar ao Spring e às rotas do Angular.

Exemplo:

    [HttpGet("{id}")]
    public Filme? DetalharFilme(int id)
    {
        return filmes.FirstOrDefault(filme => filme.Id == id);
    }

============ACTION============

É o jeito que nomeamos os métodos que respondem à requisições HTTP dos nossos controladores.

============IActionResult============

É a interface base para as respostas HTTP padronizadas no ASP.NET que classes como "NotFoundResult" ou "OkObjectResult" implementam.

É uma boa prática sempre retornarmos uma IActionResult nos nossos controllers, pois assim conseguimos ter as respostas padronizadas do jeito que queremos.

A classe ControllerBase contém métodos que já constroem esses resultados para nós, como o "NotFound()" e o "Ok(<objeto>)", que podemos utilizar diretamente dentro do nosso controller.

============CreatedAtAction()============

É um método de ControllerBase que nos retorna um CreatedAtActionResult, que devemos utilizar em respostas com status code "201 Created".

Recebe três parâmetros:

    1. Nome do método que dá acesso ao recurso criado (sempre boa prática utilizar o "nameof()" passando o método).
    2. Objeto anônimo contendo um campo com o mesmo nome do parâmetro recebido no método que retorna o recurso, como por exemplo um id que é recebido na URL (new { id = <valor do parâmetro> }). Importante ter em mente de que o(s) campo(s) devem ter exatamente o mesmo nome do(s) parâmetro(s) recebidos no método.
    3. O objeto a ser exibido no corpo da resposta.

Desta forma será gerada uma resposta com status code 201 e com o cabeçalho "Location" exatamente com o caminho até o endpoint que irá retornar o objeto cadastrado.

============EntityFrameworkCore============

É a biblioteca de ORM do .NET Core e das versões mais recentes do .NET.

============DbContext============

É a classe que estendemos nas nossas classes de acesso a dados. Inclusive, é uma boa prática utilizarmos o sufixo "Context" no final dessas nossas classes.

Essa classe nos ajuda a abstrair todo o código de conexão ao banco que precisaríamos fazer sem usá-la, funcionando de forma parecida com um Repository do Spring ou algo do tipo.

Precisamos receber um "DbContextOptions" no construtor e passá-lo para o construtor da classe base, assim conseguimos injetar as configurações que fizermos no nosso Program.cs quando estivermos adicionando o nosso DbContext nos nossos serviços da aplicação.

============DbSet<>============

É uma classe que representa um conjunto de itens em nosso banco de dados, que podemos utilizar em propriedades do nosso DbContext para retornar esses itens.

============"ConnectionStrings": {}============

É uma propriedade que colocamos no nosso "appsettings.json" que nos permite armazenar strings de conexão com bancos de dados e nomeá-las.

Uma string de conexão é mais ou menos assim:

  "ConnectionStrings": {
    "FilmesConnection": "server=localhost;database=filmes_api;user=root;password=abc@1234;"
  }

Podemos acessar essa string de conexão a partir da nossa referência "app" que construímos no Program.cs com o builder da seguinte forma:

    builder.Configuration.GetConnectionString("FilmesConnection");

============ADICIONANDO DbContext À APLICAÇÃO============

Para adicionarmos o DbContext que criamos à nossa aplicação, temos que adicionar um serviço ao nosso "app" no Program.cs.

Para fazer isso, basta utilizarmos o seguinte:

    builder.Services.AddDbContext<FilmeContext>(options =>
        options.UseMySql(connectionString,
        ServerVersion.AutoDetect(connectionString)));

Essa lambda que passamos como parâmetro é o que define as nossas opções que recebemos no nosso DbContext que criamos, e devemos utilizar alguma biblioteca específica para o banco de dados que escolhemos utilizar, que foi o MySQL nesse caso. Também conseguimos fazer conexão com um banco sem o uso de uma biblioteca específica, mas essas bibliotecas ajudam bastante, pois elas que criam os métodos como o "UseMySql" que utilizei acima.

Esse "ServerVersion" diz respeito à versão do servidor, mas se colocamos o AutoDetect() com a nossa string de conexão, nem precisamos nos preocupar.

Adicionando o DbContext dessa forma na nossa aplicação, estamos utilizando a injeção de dependências, fazendo com que essa dependência seja passada para todos os recursos que dependam dela para seu funcionamento.

============[Key]============

É uma anotação que define que aquela propriedade do nosso modelo é uma chave daquele modelo, normalmente utilizada em identificadores. Funciona com migrations no banco de dados, tornando o campo com essa anotação a chave primária da tabela criada.

============MIGRATIONS============

Migrations do banco no ASP.NET são classes, não arquivos SQL como no Flyway. Elas estendem a classe "Migration" e sobrescrevem os métodos "Up()" e "Down()", que são utilizados para aplicar a migração e removê-la, respectivamente.

No entanto, raramente vamos ter que escrever essas migrations na mão, pois temos um comando no console do NuGet que nos permite gerar uma migração baseada nos "DbContext" que temos na aplicação. Esse comando é o:

    Add-Migration <nome da migration>

Ele gera automaticamente a nossa migration, respeitando as anotações de validação que colocamos, como [Required], [Key] e etc.

Para conseguir utilizar esse comando, temos que ter a biblioteca "Tools" do EntityFramework, assim como o PowerShell atualizado.

Para aplicar as migrations que fizemos, basta utilizar o comando "Update-Database" no console do NuGet.

============DbContext NO CONTROLLER============

Para utilizarmos o DbContext nos nossos controladores, precisamos utilizar a injeção de dependências, que conseguimos utilizar criando um campo privado do tipo que queremos que seja injetado e criando um construtor pro nosso controlador que recebe o objeto que irá ser usado nessa referência.

Dessa forma já estamos injetando essa dependência e conseguimos utilizar o nosso DbContext nesse controlador.

============OPERAÇÕES NO BANCO COM DbContext============

Para fazermos operações no banco como persistir dados, fazer buscas e etc, podemos utilizar o DbSet que definimos no nosso DbContext como se ele fosse uma List comum, com a única diferença de que os dados vêm do banco e vão para o banco, com o EntityFramework fazendo as queries por baixo dos panos.

Quando fazemos alguma ação que insere ou modifica dados no banco, devemos utilizar o método "SaveChanges()" do DbContext para essas mudanças serem realmente aplicadas.

============AppDomain.CurrentDomain.GetAssemblies()============

Com esse método conseguimos pegar os assemblies do nosso projeto e utilizá-los para adicionar algo a eles ou algo do tipo.

============AutoMapper============

É uma biblioteca utilizada para facilitar o mapeamento de um objeto para outro.

Uma coisa que eu não sabia é que podemos criar vários "Profile" que definem vários mapeamentos e que são utilizados automaticamente sem especificarmos que queremos utilizar eles quando estamos utilizando a injeção de dependências.

Ele faz automaticamente o processo de adicionar nossos profiles nas configurações do nosso mapper sem que tenhamos que fazer nada, apenas criar os profiles.

Podemos utilizar o AutoMapper para mapear uma referência para outra já existente, apenas trocando os valores. Fazemos isso utilizando o método "Map()" passando duas referências já existentes.

============IMapper============

É a interface dos mappers, devemos utilizar ela como tipo das referências de mapper que recebemos por meio da injeção de dependências.

============INJEÇÃO DE DEPENDÊNCIA AutoMapper============

Para utilizar a injeção de dependências com o AutoMapper, precisamos da biblioteca AutoMapper específica para isso.

Tendo ela, basta adicionarmos o nosso AutoMapper para os serviços da nossa aplicação com o seguinte método:

    builder.Services.AddAutoMapper(<assemblies>);

Dessa forma injetamos o nosso AutoMapper em todos os lugares que precisam dele em todos os assemblies do nosso projeto. Também informamos o local onde estão os profiles passando estes assemblies.

============ATUALIZANDO REGISTRO============

A atualização de registros no EntityFramework funciona de maneira muito parecida com a atualização de registros na JPA, apenas pegamos a referência do registro, atualizamos suas informações e salvamos a mudança no banco de dados (na JPA não precisamos salvar porque ela já faz esse processo por padrão, isso é a única coisa que muda).

Normalmente retornamos uma resposta "no content" em casos de atualização.

============ModelState============

É a propriedade que guarda o estado do nosso modelo e todas as informações de validação, como os erros de validação que são retornados nas respostas HTTP, por exemplo. É uma propriedade de ControllerBase (não sei como ele sabe qual modelo é o certo, mas ele sabe).

Podemos utilizar o "TryValidateModel(<referência>)" para sabermos se um modelo está válido ou não. Esse método retorna um bool que representa se o modelo da referência está válido ou não e consegue essa informação a partir do ModelState.

Existe um método do controller que retorna uma resposta padronizada de falha de validação e recebe o ModelState como parâmetro, que é o "ValidationProblem(ModelState)".

============JsonPatchDocument============

Para utilizarmos essa classe, precisamos injetar a dependência do NewtonSoft nos nossos controllers com o seguinte código:

    builder.Services.AddControllers().AddNewtonsoftJson();

É uma classe da biblioteca NewtonSoft (do próprio ASP.NET Core, não a convencional) que nos dá uma estrutura para receber um JSON padrão em requisições PATCH (atualização parcial).

Ele recebe um JSON com formato do PATCH para ser construído, que consiste em um array de objetos JSON com as seguintes propriedades:

    1. "op": é a operação a ser utilizada no PATCH, pode ser "replace", "add", "remove", etc.
    2. "path": é o nome do membro a ser alterado, como a propriedade "nome" de um usuário, por exemplo. Sempre deve possuir o prefixo "/" e podemos colocar mais "/" na frente para acessar propriedades dentro de membros, posições em listas e etc. Referência: https://garywoodfine.com/how-to-use-jsonpatch-in-net-core/
    3. "value": é o valor que você quer passar para aquela ação, seja que ela for, como por exemplo o valor a ser concatenado em uma string no caso de um "add".

Possui o método "ApplyTo(<referência>, <ModelState>)" que aplica esse PATCH para algum objeto e atualiza o ModelState com as informações de se ele está valido e etc.

É muito importante utilizar o "TryValidateModel()" para ver se tudo está nos conformes antes de aplicar qualquer alteração no banco e tal.

Código de exemplo para lembrar o funcionamento:

    [HttpPatch("{id}")]
    public IActionResult AtualizarFilmeParcialmente(int id, [FromBody] JsonPatchDocument<FilmeAtualizacaoDTO> patch)
    {
        var filme = context.Filmes.FirstOrDefault(filme => filme.Id == id);
        if (filme == null) return NotFound();

        var filmeParaAtualizar = mapper.Map<FilmeAtualizacaoDTO>(filme);

        patch.ApplyTo(filmeParaAtualizar, ModelState);

        if (!TryValidateModel(filmeParaAtualizar))
        {
            return ValidationProblem(ModelState);
        }

        mapper.Map(filmeParaAtualizar, filme);
        context.SaveChanges();

        return NoContent();
    }

Exemplo do JSON de um PATCH:

	[
		{
			"op": "replace",
			"path": "/genero",
			"value": "Comédia"
		}
	]

============context.Remove()============

Usamos esse método para remover um objeto persistido no nosso banco de dados. Não podemos esquecer do "SaveChanges()"!

============[ProducesResponseType]============

É uma anotação que especifica o tipo de resposta HTTP que aquela action produz.

Essa anotação é utilizada pelo gerador de documentação do Swagger para definir melhor as especificações do método.

============builder.Services.AddSwaggerGen()============

Conseguimos passar uma expressão lambda para esse método, onde conseguimos configurar diversas coisas na nossa documentação gerada automaticamente.

Referência:

https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-7.0&tabs=visual-studio

Esse método e outras coisas relacionadas ao Swagger vem com a biblioteca Swashbuckle.

============IncludeXmlComments(<caminho>)============

Esse método faz com que a documentação Swagger da API gerada automaticamente leia os comentários do XML da documentação gerada do nosso projeto e utilize as infromações que estão lá na documentação da API.

Para conseguirmos ter o caminho do XML da documentação sem termos que passar ele inteiro, podemos utilizar o seguinte código:

    var xmlFile =
        $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

Dessa forma pegamos o caminho certo sempre relativamente, sem termos que escrevê-lo na mão. O importante é lembrar o que está acontecendo aí, pois não irei lembrar essas classes do namespace Reflection e etc.
